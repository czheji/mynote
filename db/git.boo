<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<root version="7" DefaultSaveDir="" DefaultSaveExtension="png">
	<item content="git" icon="none" branch="open" block="narrow" level="0" IsShown="true" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 11:36:08" IsFile="false">
		<item content="中文路径解决方法" icon="none" branch="none" block="narrow" level="1" IsShown="true" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:08:03" IsFile="false"/>
		<item content="Pro Git 中文版" icon="none" branch="open" block="narrow" level="1" IsShown="true" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:48:58" IsFile="false">
			<item content="来自http://progit.org/book/zh/" icon="none" branch="none" block="shrink" level="2" IsShown="true" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:49:23" IsFile="false"/>
			<item content="1. 起步" icon="tick" branch="close" block="narrow" level="2" IsShown="true" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:49:44" IsFile="false">
				<item content="1.1-关于版本控制" icon="none" branch="open" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:50:00" IsFile="false">
					<item content="关于版本控制" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:56:17" IsFile="false">
						<item content="什么是版本控制？我真的需要吗？版本控制是一种记录若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。&#xA;&#xA;如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而导致出现怪异问题，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:57:19" IsFile="false"/>
					</item>
					<item content="本地版本控制系统" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:55:55" IsFile="false">
						<item content="许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。这么做唯一的好处就是简单。不过坏处也不少：有时候会混淆所在的工作目录，一旦弄错文件丢了数据就没法撤销恢复。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:56:25" IsFile="false"/>
						<item content="为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异（见图 1-1）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:56:32" IsFile="false"/>
						<item content=".\git\progit-1-01.png" icon="none" branch="none" block="wide" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:02:07" IsImage="true" IsFile="true"/>
						<item content="其中最流行的一种叫做 rcs，现今许多计算机系统上都还看得到它的踪影。甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。它的工作原理基本上就是保存并管理文件补丁（patch）。文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次修订后的补丁，rcs 可以通过不断打补丁，计算出各个版本的文件内容。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:56:46" IsFile="false"/>
					</item>
					<item content="集中化的版本控制系统" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:57:38" IsFile="false">
						<item content="接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？于是，集中化的版本控制系统（ Centralized Version Control Systems，简称 CVCS ）应运而生。这类系统，诸如 CVS，Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法（见图 1-2）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:57:45" IsFile="false"/>
						<item content=".\git\progit-1-02.png" icon="none" branch="none" block="wide" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:02:16" IsImage="true" IsFile="true"/>
						<item content="这种做法带来了许多好处，特别是相较于老式的本地 VCS 来说。现在，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个 CVCS 要远比在各个客户端上维护本地数据库来得轻松容易。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:58:22" IsFile="false"/>
						<item content="事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就还是会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，而被客户端提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人事先完整提取出来过。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:58:29" IsFile="false"/>
					</item>
					<item content="分布式版本控制系统" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:58:38" IsFile="false">
						<item content="于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份（见图 1-3）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:58:45" IsFile="false"/>
						<item content=".\git\progit-1-03.png" icon="none" branch="none" block="wide" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:02:26" IsImage="true" IsFile="true"/>
						<item content="更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:59:12" IsFile="false"/>
					</item>
				</item>
				<item content="1.2-Git简史" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 13:59:38" IsFile="false">
					<item content="同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到 2002 年，整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:03:14" IsFile="false"/>
					<item content="到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:03:01" IsFile="false"/>
					<item content="* 速度 * 简单的设计 * 对非线性开发模式的强力支持（允许上千个并行开发的分支） * 完全分布式 * 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00610000" BkgrdColor="c6efce00" ModifyTime="2011-09-01 14:03:07" IsFile="false"/>
					<item content="自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统（见第三章），可以应付各种复杂的项目开发需求。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:03:11" IsFile="false"/>
				</item>
				<item content="1.3-Git基础" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:00:11" IsFile="false">
					<item content="那么，简单地说，Git 究竟是怎样的一个系统呢？请注意，接下来的内容非常重要，若是理解了 Git 的思想和基本工作原理，用起来就会知其所以然，游刃有余。在开始学习 Git 的时候，请不要尝试把各种概念和其他版本控制系统（诸如 Subversion 和 Perforce 等）相比拟，否则容易混淆每个操作的实际意义。Git 在保存和处理各种信息的时候，虽然操作起来的命令形式非常相近，但它与其他版本控制系统的做法颇为不同。理解这些差异将有助于你准确地使用 Git 提供的各种工具。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:00:21" IsFile="false"/>
					<item content="直接记录快照，而非差异比较" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:00:29" IsFile="false"/>
					<item content="Git 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统（CVS，Subversion，Perforce，Bazaar 等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容，请看图 1-4。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:00:41" IsFile="false"/>
					<item content=".\git\progit-1-04.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:01:40" IsImage="true" IsFile="true"/>
					<item content="Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。Git 的工作方式就像图 1-5 所示。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:01:13" IsFile="false"/>
					<item content=".\git\progit-1-05.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:03:59" IsImage="true" IsFile="true"/>
					<item content="这是 Git 同其他系统的重要区别。它完全颠覆了传统版本控制的套路，并对各个环节的实现方式作了新的设计。Git 更像是个小型的文件系统，但它同时还提供了许多以此为基础的超强工具，而不只是一个简单的 VCS。稍后在第三章讨论 Git 分支管理的时候，我们会再看看这样的设计究竟会带来哪些好处。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:04:10" IsFile="false"/>
					<item content="近乎所有操作都是本地执行" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:04:24" IsFile="false"/>
					<item content="在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 CVCS 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:04:33" IsFile="false"/>
					<item content="举个例子，如果要浏览项目的历史更新摘要，Git 不用跑到外面的服务器上去取数据回来，而直接从本地数据库读取后展示给你看。所以任何时候你都可以马上翻阅，无需等待。如果想要看当前版本的文件和一个月前的版本之间有何差异，Git 会取出一个月前的快照和当前文件作一次差异运算，而不用请求远程服务器来做这件事，或是把老版本的文件拉到本地来作比较。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:04:38" IsFile="false"/>
					<item content="用 CVCS 的话，没有网络或者断开 VPN 你就无法做任何事情。但用 Git 的话，就算你在飞机或者火车上，都可以非常愉快地频繁提交更新，等到了有网络的时候再上传到远程仓库。同样，在回家的路上，不用连接 VPN 你也可以继续工作。换作其他版本控制系统，这么做几乎不可能，抑或非常麻烦。比如 Perforce，如果不连到服务器，几乎什么都做不了（译注：默认无法发出命令 p4 edit file 开始编辑文件，因为 Perforce 需要联网通知系统声明该文件正在被谁修订。但实际上手工修改文件权限可以绕过这个限制，只是完成后还是无法提交更新。）；如果是 Subversion 或 CVS，虽然可以编辑文件，但无法提交更新，因为数据库在网络上。看上去好像这些都不是什么大问题，但实际体验过之后，你就会惊喜地发现，这其实是会带来很大不同的。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:04:47" IsFile="false"/>
					<item content="时刻保持数据完整性" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:04:53" IsFile="false"/>
					<item content="在保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git 一无所知。这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git 都能立即察觉。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:01" IsFile="false"/>
					<item content="Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符（0-9 及 a-f）组成，看起来就像是：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:06" IsFile="false"/>
					<item content="24b9da6552252987aa493b52f8696cd6d3b00373" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:05:12" IsFile="false"/>
					<item content="Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:23" IsFile="false"/>
					<item content="多数操作仅添加数据" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:28" IsFile="false"/>
					<item content="常用的 Git 操作大多仅仅是把数据添加到数据库。因为任何一种不可逆的操作，比如删除数据，都会使回退或重现历史版本变得困难重重。在别的 VCS 中，若还未提交更新，就有可能丢失或者混淆一些修改的内容，但在 Git 里，一旦提交快照之后就完全不用担心丢失数据，特别是养成定期推送到其他仓库的习惯的话。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:35" IsFile="false"/>
					<item content="这种高可靠性令我们的开发工作安心不少，尽管去做各种试验性的尝试好了，再怎样也不会弄丢数据。至于 Git 内部究竟是如何保存和恢复数据的，我们会在第九章讨论 Git 内部原理时再作详述。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:41" IsFile="false"/>
					<item content="文件的三种状态" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:46" IsFile="false"/>
					<item content="好，现在请注意，接下来要讲的概念非常重要。对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:53" IsFile="false"/>
					<item content="由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:05:58" IsFile="false"/>
					<item content=".\git\progit-1-06.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:14" IsImage="true" IsFile="true"/>
					<item content="每个项目都有一个 Git 目录（译注：如果 git clone 出来的话，就是其中 .git 的目录；如果 git clone --bare 的话，新建的目录本身就是 Git 目录。），它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:24" IsFile="false"/>
					<item content="从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:29" IsFile="false"/>
					<item content="所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:34" IsFile="false"/>
					<item content="基本的 Git 工作流程如下：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:40" IsFile="false"/>
					<item content="1. 在工作目录中修改某些文件。 2. 对修改后的文件进行快照，然后保存到暂存区域。 3. 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:45" IsFile="false"/>
					<item content="所以，我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。到第二章的时候，我们会进一步了解其中细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:06:50" IsFile="false"/>
				</item>
				<item content="1.4-安装Git" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:07:07" IsFile="false">
					<item content="是时候动手尝试下 Git 了，不过得先安装好它。有许多种安装方式，主要分为两种，一种是通过编译源代码来安装；另一种是使用为特定平台预编译好的安装包。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:07:19" IsFile="false"/>
					<item content="从源代码安装" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:07:23" IsFile="false">
						<item content="若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git 的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux 版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:07:30" IsFile="false"/>
						<item content="Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:07:34" IsFile="false"/>
						<item content="$ yum install curl-devel expat-devel gettext-devel \&#xA;  openssl-devel zlib-devel&#xA;&#xA;$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \&#xA;  libz-dev libssl-dev" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:07:39" IsFile="false"/>
						<item content="之后，从下面的 Git 官方站点下载最新版本源代码" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:07:52" IsFile="false"/>
						<item content="http://git-scm.com/download" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:07:57" IsFile="false"/>
						<item content="然后编译并安装：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:08:07" IsFile="false"/>
						<item content="$ tar -zxf git-1.7.2.2.tar.gz&#xA;$ cd git-1.7.2.2&#xA;$ make prefix=/usr/local all&#xA;$ sudo make prefix=/usr/local install" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:08:12" IsFile="false"/>
						<item content="现在已经可以用 git 命令了，用 git 把 Git 项目仓库克隆到本地，以便日后随时更新：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:08:23" IsFile="false"/>
						<item content="$ git clone git://git.kernel.org/pub/scm/git/git.git" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:08:30" IsFile="false"/>
					</item>
					<item content="在 Linux 上安装" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:08:41" IsFile="false">
						<item content="如果要在 Linux 上安装预编译好的 Git 二进制安装包，可以直接用系统提供的包管理工具。在 Fedora 上用 yum 安装：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:08:48" IsFile="false"/>
						<item content="$ yum install git-core" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:08:53" IsFile="false"/>
						<item content="在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:09:00" IsFile="false"/>
						<item content="$ apt-get install git-core" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:09:07" IsFile="false"/>
					</item>
					<item content="在 Mac 上安装" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:09:19" IsFile="false">
						<item content="在 Mac 上安装 Git 有两种方式。最容易的当属使用图形化的 Git 安装工具，界面如图 1-7，下载地址在：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:09:27" IsFile="false"/>
						<item content="http://code.google.com/p/git-osx-installer" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:09:33" IsFile="false"/>
						<item content=".\git\progit-1-07.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:09:53" IsImage="true" IsFile="true"/>
						<item content="另一种是通过 MacPorts (http://www.macports.org) 安装。如果已经装好了 MacPorts，用下面的命令安装 Git：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:10:03" IsFile="false"/>
						<item content="$ sudo port install git-core +svn +doc +bash_completion +gitweb" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:10:09" IsFile="false"/>
						<item content="这种方式就不需要再自己安装依赖库了，Macports 会帮你搞定这些麻烦事。一般上面列出的安装选项已经够用，要是你想用 Git 连接 Subversion 的代码仓库，还可以加上 +svn 选项，具体将在第八章作介绍。（译注：还有一种是使用 homebrew（https://github.com/mxcl/homebrew）：brew install git。）" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:10:21" IsFile="false"/>
					</item>
					<item content="在 Windows 上安装" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:10:28" IsFile="false">
						<item content="在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 Google Code 的页面上下载 exe 安装文件并运行：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:10:43" IsFile="false"/>
						<item content="http://code.google.com/p/msysgit" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 14:10:49" IsFile="false"/>
						<item content="完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:11:03" IsFile="false"/>
						<item content="如果想要使用utf-8提交中文名字的文件和路径，那么不能使用msysgit，可以有两种选择：&#xA;4msysgit-utf8-filepath &#xA;utf8-git-on-windows" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:14:06" IsFile="false"/>
						<item content="4msysgit-utf8-filepath&#xA;https://github.com/tmurakam/4msysgit-utf8-filepath" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:14:57" IsFile="false"/>
						<item content="utf8-git-on-windows&#xA;http://code.google.com/p/utf8-git-on-windows/" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:14:52" IsFile="false"/>
						<item content="完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:15:23" IsFile="false"/>
					</item>
				</item>
				<item content="1.5-初次运行Git前的配置" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 14:15:35" IsFile="false">
					<item content="一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:06:43" IsFile="false"/>
					<item content="Git 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:06:47" IsFile="false"/>
					<item content="•/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="0000ff00" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:07:15" IsFile="false"/>
					<item content="•~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="0000ff00" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:07:13" IsFile="false"/>
					<item content="•当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="0000ff00" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:07:03" IsFile="false"/>
					<item content="在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:07:35" IsFile="false"/>
					<item content="用户信息" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:07:41" IsFile="false">
						<item content="第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:07:48" IsFile="false"/>
						<item content="$ git config --global user.name &quot;John Doe&quot;&#xA;$ git config --global user.email johndoe@example.com" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:07:54" IsFile="false"/>
						<item content="如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:08:06" IsFile="false"/>
					</item>
					<item content="文本编辑器" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:08:13" IsFile="false">
						<item content="接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:08:20" IsFile="false"/>
						<item content="$ git config --global core.editor emacs" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:08:25" IsFile="false"/>
					</item>
					<item content="差异分析工具" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:08:36" IsFile="false">
						<item content="还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:08:44" IsFile="false"/>
						<item content="$ git config --global merge.tool vimdiff" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:08:48" IsFile="false"/>
						<item content="Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:09:00" IsFile="false"/>
					</item>
					<item content="查看配置信息" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:09:08" IsFile="false">
						<item content="要检查已有的配置信息，可以使用 git config --list 命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:09:13" IsFile="false"/>
						<item content="$ git config --list&#xA;user.name=Scott Chacon&#xA;user.email=schacon@gmail.com&#xA;color.status=auto&#xA;color.branch=auto&#xA;color.interactive=auto&#xA;color.diff=auto&#xA;..." icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:09:18" IsFile="false"/>
						<item content="有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:09:27" IsFile="false"/>
						<item content="也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:09:32" IsFile="false"/>
						<item content="$ git config user.name&#xA;Scott Chacon" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:09:38" IsFile="false"/>
					</item>
				</item>
				<item content="1.6-获取帮助" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:10:02" IsFile="false">
					<item content="想了解 Git 的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:10:10" IsFile="false"/>
					<item content="$ git help &lt;verb&gt;&#xA;$ git &lt;verb&gt; --help&#xA;$ man git-&lt;verb&gt;" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:10:15" IsFile="false"/>
					<item content="比如，要学习 config 命令可以怎么用，运行：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:10:23" IsFile="false"/>
					<item content="$ git help config" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:10:27" IsFile="false"/>
					<item content="我们随时都可以浏览这些帮助信息而无需连网。不过，要是你觉得还不够，可以到 Frenode IRC 服务器（irc.freenode.net）上的 #git 或 #github 频道寻求他人帮助。这两个频道上总有着上百号人，大多都有着丰富的 git 知识，并且乐于助人。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:10:35" IsFile="false"/>
				</item>
				<item content="1.7-小结" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:10:45" IsFile="false">
					<item content="至此，你该对 Git 有了点基本认识，包括它和以前你使用的 CVCS 之间的差别。现在，在你的系统上应该已经装好了 Git，设置了自己的名字和电邮。接下来让我们继续学习 Git 的基础知识。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:10:52" IsFile="false"/>
				</item>
			</item>
			<item content="2. Git 基础" icon="tick" branch="close" block="narrow" level="2" IsShown="true" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:12:22" IsFile="false">
				<item content="读完本章你就能上手使用 Git 了。本章将介绍几个最基本的，也是最常用的 Git 命令，以后绝大多数时间里用到的也就是这几个命令。读完本章，你就能初始化一个新的代码仓库，做一些适当配置；开始或停止跟踪某些文件；暂存或提交某些更新。我们还会展示如何让 Git 忽略某些文件，或是名称符合特定模式的文件；如何既快且容易地撤消犯下的小错误；如何浏览项目的更新历史，查看某两次更新之间的差异；以及如何从远程仓库拉数据下来或者推数据上去。" icon="none" branch="none" block="narrow" level="3" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:13:47" IsFile="false"/>
				<item content="2.1 - 取得项目的 Git 仓库" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:13:27" IsFile="false">
					<item content="有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:02" IsFile="false"/>
					<item content="在工作目录中初始化新仓库" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:07" IsFile="false">
						<item content="要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:12" IsFile="false"/>
						<item content="$ git init" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:14:16" IsFile="false"/>
						<item content="初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:26" IsFile="false"/>
						<item content="如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:31" IsFile="false"/>
						<item content="$ git add *.c&#xA;$ git add README&#xA;$ git commit -m &apos;initial project version&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:14:38" IsFile="false"/>
						<item content="稍后我们再逐一解释每条命令的意思。不过现在，你已经得到了一个实际维护着若干文件的 Git 仓库。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:47" IsFile="false"/>
					</item>
					<item content="从现有仓库克隆" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:14:55" IsFile="false">
						<item content="如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令。如果你熟悉其他的 VCS 比如 Subversion，你可能已经注意到这里使用的是 clone 而不是 checkout。这是个非常重要的差别，Git 收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（虽然可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考第四章）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:15:01" IsFile="false"/>
						<item content="克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:15:05" IsFile="false"/>
						<item content="$ git clone git://github.com/schacon/grit.git" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:15:11" IsFile="false"/>
						<item content="这会在当前目录下创建一个名为“grit”的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:15:20" IsFile="false"/>
						<item content="$ git clone git://github.com/schacon/grit.git mygrit" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:15:25" IsFile="false"/>
						<item content="唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:15:35" IsFile="false"/>
						<item content="Git 支持许多数据传输协议。之前的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者 user@server:/path.git 表示的 SSH 传输协议。我们会在第四章详细介绍所有这些协议在服务器端该如何配置使用，以及各种方式之间的利弊。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:15:41" IsFile="false"/>
					</item>
				</item>
				<item content="2.2 - 记录每次更新到仓库" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:12:42" IsFile="false">
					<item content="现在我们手上已经有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:16:08" IsFile="false"/>
					<item content="请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:16:13" IsFile="false"/>
					<item content="在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用 Git 时的文件状态变化周期如图 2-1 所示。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:16:18" IsFile="false"/>
					<item content=".\git\progit-2-01.png" icon="none" branch="none" block="wide" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:16:38" IsImage="true" IsFile="true"/>
					<item content="图 2-1. 文件的状态变化周期" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:16:50" IsFile="false"/>
					<item content="检查当前文件状态" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:17:05" IsFile="false">
						<item content="要确定哪些文件当前处于什么状态，可以用 git status 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:17:13" IsFile="false"/>
						<item content="$ git status&#xA;# On branch master&#xA;nothing to commit (working directory clean)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:17:20" IsFile="false"/>
						<item content="这说明你现在的工作目录相当干净。换句话说，当前没有任何跟踪着的文件，也没有任何文件在上次提交后更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称，实际是可以修改的，现在先不用考虑。下一章我们就会详细讨论分支和引用。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:17:32" IsFile="false"/>
						<item content="现在让我们用 vim 编辑一个新文件 README，保存退出后运行 git status 会看到该文件出现在未跟踪文件列表中：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:17:37" IsFile="false"/>
						<item content="$ vim README&#xA;$ git status&#xA;# On branch master&#xA;# Untracked files:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)&#xA;#&#xA;#	README&#xA;nothing added to commit but untracked files present (use &quot;git add&quot; to track)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:17:45" IsFile="false"/>
						<item content="就是在“Untracked files”这行下面。Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理 README 这个文件。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:17:55" IsFile="false"/>
					</item>
					<item content="跟踪新文件" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:18:07" IsFile="false">
						<item content="使用命令 git add 开始跟踪一个新文件。所以，要跟踪 README 文件，运行：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:18:15" IsFile="false"/>
						<item content="$ git add README" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:18:19" IsFile="false"/>
						<item content="此时再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:18:29" IsFile="false"/>
						<item content="$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	new file:   README&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:18:34" IsFile="false"/>
						<item content="只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用 git init 后就运行了 git add 命令，开始跟踪当前目录下的文件。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 git add 的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续 add 操作的实际意义了。）" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:18:43" IsFile="false"/>
					</item>
					<item content="暂存已修改文件" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:18:52" IsFile="false">
						<item content="现在我们修改下之前已跟踪过的文件 benchmarks.rb，然后再次运行 status 命令，会看到这样的状态报告：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:19:00" IsFile="false"/>
						<item content="$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	new file:   README&#xA;#&#xA;# Changed but not updated:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#xA;#&#xA;#	modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:19:10" IsFile="false"/>
						<item content="文件 benchmarks.rb 出现在 “Changed but not updated” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令（这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）。现在让我们运行 git add 将 benchmarks.rb 放到暂存区，然后再看看 git status 的输出：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:19:19" IsFile="false"/>
						<item content="$ git add benchmarks.rb&#xA;$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	new file:   README&#xA;#	modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:19:27" IsFile="false"/>
						<item content="现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在 benchmarks.rb 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status 看看：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:19:36" IsFile="false"/>
						<item content="$ vim benchmarks.rb &#xA;$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	new file:   README&#xA;#	modified:   benchmarks.rb&#xA;#&#xA;# Changed but not updated:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#xA;#&#xA;#	modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:19:44" IsFile="false"/>
						<item content="怎么回事？benchmarks.rb 文件出现了两次！一次算未暂存，一次算已暂存，这怎么可能呢？好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:19:53" IsFile="false"/>
						<item content="$ git add benchmarks.rb&#xA;$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	new file:   README&#xA;#	modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:20:01" IsFile="false"/>
					</item>
					<item content="忽略某些文件" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:20:26" IsFile="false">
						<item content="一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:20:33" IsFile="false"/>
						<item content="$ cat .gitignore&#xA;*.[oa]&#xA;*~" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:20:37" IsFile="false"/>
						<item content="第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:20:46" IsFile="false"/>
						<item content="文件 .gitignore 的格式规范如下：&#xA; •所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。&#xA; •可以使用标准的 glob 模式匹配。 * 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 * 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:20:55" IsFile="false"/>
						<item content="所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:21:05" IsFile="false"/>
						<item content="我们再看一个 .gitignore 文件的例子：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:21:09" IsFile="false"/>
						<item content="# 此为注释 – 将被 Git 忽略&#xA;*.a       # 忽略所有 .a 结尾的文件&#xA;!lib.a    # 但 lib.a 除外&#xA;/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO&#xA;build/    # 忽略 build/ 目录下的所有文件&#xA;doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:21:14" IsFile="false"/>
					</item>
					<item content="查看已暂存和未暂存的更新" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:21:26" IsFile="false">
						<item content="实际上 git status 的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用 git diff 命令。稍后我们会详细介绍 git diff，不过现在，它已经能回答我们的两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？ git diff 会使用文件补丁的格式显示具体添加和删除的行。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:21:32" IsFile="false"/>
						<item content="假如再次修改 README 文件后暂存，然后编辑 benchmarks.rb 文件后先别暂存，运行 status 命令，会看到：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:21:36" IsFile="false"/>
						<item content="$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	new file:   README&#xA;#&#xA;# Changed but not updated:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#xA;#&#xA;#	modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:21:42" IsFile="false"/>
						<item content="要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:21:50" IsFile="false"/>
						<item content="$ git diff&#xA;diff --git a/benchmarks.rb b/benchmarks.rb&#xA;index 3cb747f..da65585 100644&#xA;--- a/benchmarks.rb&#xA;+++ b/benchmarks.rb&#xA;@@ -36,6 +36,10 @@ def main&#xA;           @commit.parents[0].parents[0].parents[0]&#xA;         end&#xA;&#xA;+        run_code(x, &apos;commits 1&apos;) do&#xA;+          git.commits.size&#xA;+        end&#xA;+&#xA;         run_code(x, &apos;commits 2&apos;) do&#xA;           log = git.commits(&apos;master&apos;, 15)&#xA;           log.size" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:21:58" IsFile="false"/>
						<item content="此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:22:06" IsFile="false"/>
						<item content="若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）来看看实际的效果：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:22:13" IsFile="false"/>
						<item content="$ git diff --cached&#xA;diff --git a/README b/README&#xA;new file mode 100644&#xA;index 0000000..03902a1&#xA;--- /dev/null&#xA;+++ b/README2&#xA;@@ -0,0 +1,5 @@&#xA;+grit&#xA;+ by Tom Preston-Werner, Chris Wanstrath&#xA;+ http://github.com/mojombo/grit&#xA;+&#xA;+Grit is a Ruby library for extracting information from a Git repository" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:22:21" IsFile="false"/>
						<item content="请注意，单单 git diff 不过是显示还没有暂存起来的改动，而不是这次工作和上次提交之间的差异。所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:22:29" IsFile="false"/>
						<item content="像之前说的，暂存 benchmarks.rb 后再编辑，运行 git status 会看到暂存前后的两个版本：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:22:34" IsFile="false"/>
						<item content="$ git add benchmarks.rb&#xA;$ echo &apos;# test line&apos; &gt;&gt; benchmarks.rb&#xA;$ git status&#xA;# On branch master&#xA;#&#xA;# Changes to be committed:&#xA;#&#xA;#	modified:   benchmarks.rb&#xA;#&#xA;# Changed but not updated:&#xA;#&#xA;#	modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:22:41" IsFile="false"/>
						<item content="现在运行 git diff 看暂存前后的变化：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:22:50" IsFile="false"/>
						<item content="$ git diff&#xA;diff --git a/benchmarks.rb b/benchmarks.rb&#xA;index e445e28..86b2f7c 100644&#xA;--- a/benchmarks.rb&#xA;+++ b/benchmarks.rb&#xA;@@ -127,3 +127,4 @@ end&#xA; main()&#xA; &#xA; ##pp Grit::GitRuby.cache_client.stats&#xA;+# test line" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:22:55" IsFile="false"/>
						<item content="然后用 git diff --cached 查看已经暂存起来的变化：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:23:03" IsFile="false"/>
						<item content="$ git diff --cached&#xA;diff --git a/benchmarks.rb b/benchmarks.rb&#xA;index 3cb747f..e445e28 100644&#xA;--- a/benchmarks.rb&#xA;+++ b/benchmarks.rb&#xA;@@ -36,6 +36,10 @@ def main&#xA;          @commit.parents[0].parents[0].parents[0]&#xA;        end&#xA;&#xA;+        run_code(x, &apos;commits 1&apos;) do&#xA;+          git.commits.size&#xA;+        end&#xA;+&#xA;        run_code(x, &apos;commits 2&apos;) do&#xA;          log = git.commits(&apos;master&apos;, 15)&#xA;          log.size" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:23:08" IsFile="false"/>
					</item>
					<item content="提交更新" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:23:17" IsFile="false">
						<item content="现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:23:24" IsFile="false"/>
						<item content="$ git commit" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:23:29" IsFile="false"/>
						<item content="这种方式会启动文本编辑器以便输入本次提交的说明。（默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。当然也可以按照第一章介绍的方式，使用 git config --global core.editor 命令设定你喜欢的编辑软件。）" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:23:36" IsFile="false"/>
						<item content="编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:23:42" IsFile="false"/>
						<item content="# Please enter the commit message for your changes. Lines starting&#xA;# with &apos;#&apos; will be ignored, and an empty message aborts the commit.&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#       new file:   README&#xA;#       modified:   benchmarks.rb&#xA;~&#xA;~&#xA;~&#xA;&quot;.git/COMMIT_EDITMSG&quot; 10L, 283C" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:23:49" IsFile="false"/>
						<item content="可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。（如果觉得这还不够，可以用 -v 选项将修改差异的每一行都包含到注释中来。）退出编辑器时，Git 会丢掉注释行，将说明内容和本次更新提交到仓库。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:23:56" IsFile="false"/>
						<item content="另外也可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:01" IsFile="false"/>
						<item content="$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;&#xA;[master]: created 463dc4f: &quot;Fix benchmarks for speed&quot;&#xA; 2 files changed, 3 insertions(+), 0 deletions(-)&#xA; create mode 100644 README" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:24:06" IsFile="false"/>
						<item content="好，现在你已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添改和删改过。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:14" IsFile="false"/>
						<item content="记住，提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:19" IsFile="false"/>
					</item>
					<item content="跳过使用暂存区域" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:27" IsFile="false">
						<item content="尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:34" IsFile="false"/>
						<item content="$ git status&#xA;# On branch master&#xA;#&#xA;# Changed but not updated:&#xA;#&#xA;#	modified:   benchmarks.rb&#xA;#&#xA;$ git commit -a -m &apos;added new benchmarks&apos;&#xA;[master 83e38c7] added new benchmarks&#xA; 1 files changed, 5 insertions(+), 0 deletions(-)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:24:39" IsFile="false"/>
						<item content="看到了吗？提交之前不再需要 git add 文件 benchmarks.rb 了。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:48" IsFile="false"/>
					</item>
					<item content="移除文件" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:24:54" IsFile="false">
						<item content="要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:25:00" IsFile="false"/>
						<item content="如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changed but not updated” 部分（也就是_未暂存_清单）看到：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:25:04" IsFile="false"/>
						<item content="$ rm grit.gemspec&#xA;$ git status&#xA;# On branch master&#xA;#&#xA;# Changed but not updated:&#xA;#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)&#xA;#&#xA;#       deleted:    grit.gemspec&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:25:10" IsFile="false"/>
						<item content="然后再运行 git rm 记录此次移除文件的操作：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:25:19" IsFile="false"/>
						<item content="$ git rm grit.gemspec&#xA;rm &apos;grit.gemspec&apos;&#xA;$ git status&#xA;# On branch master&#xA;#&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#       deleted:    grit.gemspec&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:25:24" IsFile="false"/>
						<item content="最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:25:34" IsFile="false"/>
						<item content="另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 --cached 选项即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:25:40" IsFile="false"/>
						<item content="$ git rm --cached readme.txt" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:25:44" IsFile="false"/>
						<item content="后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:25:53" IsFile="false"/>
						<item content="$ git rm log/\*.log" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:26:00" IsFile="false"/>
						<item content="注意到星号 * 之前的反斜杠 \，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜杠。）。此命令删除所有 log/ 目录下扩展名为 .log 的文件。类似的比如：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:26:09" IsFile="false"/>
						<item content="$ git rm \*~" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:26:16" IsFile="false"/>
						<item content="会递归删除当前目录及其子目录中所有 ~ 结尾的文件。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:26:30" IsFile="false"/>
					</item>
					<item content="移动文件" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:26:36" IsFile="false">
						<item content="不像其他的 VCS 系统，Git 并不跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:26:44" IsFile="false"/>
						<item content="既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。要在 Git 中对文件改名，可以这么做：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:26:52" IsFile="false"/>
						<item content="$ git mv file_from file_to" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:26:57" IsFile="false"/>
						<item content="它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:27:05" IsFile="false"/>
						<item content="$ git mv README.txt README&#xA;$ git status&#xA;# On branch master&#xA;# Your branch is ahead of &apos;origin/master&apos; by 1 commit.&#xA;#&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#       renamed:    README.txt -&gt; README&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:27:13" IsFile="false"/>
						<item content="其实，运行 git mv 就相当于运行了下面三条命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:27:22" IsFile="false"/>
						<item content="$ mv README.txt README&#xA;$ git rm README.txt&#xA;$ git add README" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:27:31" IsFile="false"/>
						<item content="如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式都一样。当然，直接用 git mv 轻便得多，不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:27:41" IsFile="false"/>
					</item>
				</item>
				<item content="2.3 - 查看提交历史" icon="none" branch="close" block="wide" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:12:46" IsFile="false">
					<item content="在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:45:37" IsFile="false"/>
					<item content="接下来的例子会用我专门用于演示的 simplegit 项目，运行下面的命令获取该项目源代码：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:45:42" IsFile="false"/>
					<item content="git clone git://github.com/schacon/simplegit-progit.git" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:45:48" IsFile="false"/>
					<item content="然后在此项目中运行 git log，应该会看到下面的输出：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:45:59" IsFile="false"/>
					<item content="$ git log&#xA;commit ca82a6dff817ec66f44342007202690a93763949&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Mon Mar 17 21:52:11 2008 -0700&#xA;&#xA;    changed the version number&#xA;&#xA;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sat Mar 15 16:40:33 2008 -0700&#xA;&#xA;    removed unnecessary test code&#xA;&#xA;commit a11bef06a3f659402fe7563abf99ad00de2209e6&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sat Mar 15 10:31:28 2008 -0700&#xA;&#xA;    first commit" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:46:05" IsFile="false"/>
					<item content="默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:46:12" IsFile="false"/>
					<item content="git log 有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:46:17" IsFile="false"/>
					<item content="我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:46:21" IsFile="false"/>
					<item content="$ git log -p -2&#xA;commit ca82a6dff817ec66f44342007202690a93763949&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Mon Mar 17 21:52:11 2008 -0700&#xA;&#xA;    changed the version number&#xA;&#xA;diff --git a/Rakefile b/Rakefile&#xA;index a874b73..8f94139 100644&#xA;--- a/Rakefile&#xA;+++ b/Rakefile&#xA;@@ -5,7 +5,7 @@ require &apos;rake/gempackagetask&apos;&#xA; spec = Gem::Specification.new do |s|&#xA;-    s.version   =   &quot;0.1.0&quot;&#xA;+    s.version   =   &quot;0.1.1&quot;&#xA;     s.author    =   &quot;Scott Chacon&quot;&#xA;&#xA;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sat Mar 15 16:40:33 2008 -0700&#xA;&#xA;    removed unnecessary test code&#xA;&#xA;diff --git a/lib/simplegit.rb b/lib/simplegit.rb&#xA;index a0a60ae..47c6340 100644&#xA;--- a/lib/simplegit.rb&#xA;+++ b/lib/simplegit.rb&#xA;@@ -18,8 +18,3 @@ class SimpleGit&#xA;     end&#xA;&#xA; end&#xA;-&#xA;-if $0 == __FILE__&#xA;-  git = SimpleGit.new&#xA;-  puts git.show&#xA;-end&#xA;\ No newline at end of file" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:46:28" IsFile="false"/>
					<item content="在做代码审查，或者要快速浏览其他协作者提交的更新都作了哪些改动时，就可以用这个选项。此外，还有许多摘要选项可以用，比如 --stat，仅显示简要的增改行数统计：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:46:37" IsFile="false"/>
					<item content="$ git log --stat &#xA;commit ca82a6dff817ec66f44342007202690a93763949&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Mon Mar 17 21:52:11 2008 -0700&#xA;&#xA;    changed the version number&#xA;&#xA; Rakefile |    2 +-&#xA; 1 files changed, 1 insertions(+), 1 deletions(-)&#xA;&#xA;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sat Mar 15 16:40:33 2008 -0700&#xA;&#xA;    removed unnecessary test code&#xA;&#xA; lib/simplegit.rb |    5 -----&#xA; 1 files changed, 0 insertions(+), 5 deletions(-)&#xA;&#xA;commit a11bef06a3f659402fe7563abf99ad00de2209e6&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sat Mar 15 10:31:28 2008 -0700&#xA;&#xA;    first commit&#xA;&#xA; README           |    6 ++++++&#xA; Rakefile         |   23 +++++++++++++++++++++++&#xA; lib/simplegit.rb |   25 +++++++++++++++++++++++++&#xA; 3 files changed, 54 insertions(+), 0 deletions(-)" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:46:43" IsFile="false"/>
					<item content="每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。还有个常用的 --pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 oneline 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:46:51" IsFile="false"/>
					<item content="$ git log --pretty=oneline&#xA;ca82a6dff817ec66f44342007202690a93763949 changed the version number&#xA;085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code&#xA;a11bef06a3f659402fe7563abf99ad00de2209e6 first commit" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:46:56" IsFile="false"/>
					<item content="但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:47:05" IsFile="false"/>
					<item content="$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;&#xA;ca82a6d - Scott Chacon, 11 months ago : changed the version number&#xA;085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code&#xA;a11bef0 - Scott Chacon, 11 months ago : first commit" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:47:10" IsFile="false"/>
					<item content="表 2-1 列出了常用的格式占位符写法及其代表的意义。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:47:20" IsFile="false"/>
					<item content="选项	 说明&#xA;%H	提交对象（commit）的完整哈希字串&#xA;%h	提交对象的简短哈希字串&#xA;%T	树对象（tree）的完整哈希字串&#xA;%t	树对象的简短哈希字串&#xA;%P	父对象（parent）的完整哈希字串&#xA;%p	父对象的简短哈希字串&#xA;%an	作者（author）的名字&#xA;%ae	作者的电子邮件地址&#xA;%ad	作者修订日期（可以用 -date= 选项定制格式）&#xA;%ar	作者修订日期，按多久以前的方式显示&#xA;%cn	提交者(committer)的名字&#xA;%ce	提交者的电子邮件地址&#xA;%cd	提交日期&#xA;%cr	提交日期，按多久以前的方式显示&#xA;%s	提交说明" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:47:28" IsFile="false"/>
					<item content="你一定奇怪_作者（author）_和_提交者（committer）_之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章再详细介绍两者之间的细微差别。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:47:35" IsFile="false"/>
					<item content="用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的 Grit 项目仓库中可以看到：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:47:40" IsFile="false"/>
					<item content="$ git log --pretty=format:&quot;%h %s&quot; --graph&#xA;* 2d3acf9 ignore errors from SIGCHLD on trap&#xA;*  5e3ee11 Merge branch &apos;master&apos; of git://github.com/dustin/grit&#xA;|\&#xA;| * 420eac9 Added a method for getting the current branch.&#xA;* | 30e367c timeout code and tests&#xA;* | 5a09431 add timeout protection to grit&#xA;* | e1193f8 support for heads with slashes in them&#xA;|/&#xA;* d6016bc require time for xmlschema&#xA;*  11d191e Merge branch &apos;defunkt&apos; into local" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:47:47" IsFile="false"/>
					<item content="以上只是简单介绍了一些 git log 命令支持的选项。表 2-2 还列出了一些其他常用的选项及其释义。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:47:56" IsFile="false"/>
					<item content="选项 说明&#xA;-p 按补丁格式显示每个更新之间的差异。&#xA;--stat 显示每次更新的文件修改统计信息。&#xA;--shortstat 只显示 --stat 中最后的行数修改添加移除统计。&#xA;--name-only 仅在提交信息后显示已修改的文件清单。&#xA;--name-status 显示新增、修改、删除的文件清单。&#xA;--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。&#xA;--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。&#xA;--graph 显示 ASCII 图形表示的分支合并历史。&#xA;--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:48:02" IsFile="false"/>
					<item content="限制输出长度" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:10" IsFile="false">
						<item content="除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -&lt;n&gt; 选项的写法，其中的 n 可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:16" IsFile="false"/>
						<item content="另外还有按照时间作限制的选项，比如 --since 和 --until。下面的命令列出所有最近两周内的提交：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:21" IsFile="false"/>
						<item content="$ git log --since=2.weeks" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:48:26" IsFile="false"/>
						<item content="你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:34" IsFile="false"/>
						<item content="还可以给出若干搜索条件，列出符合的提交。用 --author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match 选项。）" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:38" IsFile="false"/>
						<item content="如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（--）隔开之前的选项和后面限定的路径名。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:44" IsFile="false"/>
						<item content="表 2-3 还列出了其他常用的类似选项。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:48:49" IsFile="false"/>
						<item content="选项 说明&#xA;-(n)	仅显示最近的 n 条提交&#xA;--since, --after 仅显示指定时间之后的提交。&#xA;--until, --before 仅显示指定时间之前的提交。&#xA;--author 仅显示指定作者相关的提交。&#xA;--committer 仅显示指定提交者相关的提交。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:48:54" IsFile="false"/>
						<item content="来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:49:02" IsFile="false"/>
						<item content="$ git log --pretty=&quot;%h - %s&quot; --author=gitster --since=&quot;2008-10-01&quot; \&#xA;   --before=&quot;2008-11-01&quot; --no-merges -- t/&#xA;5610e3b - Fix testcase failure when extended attribute&#xA;acd3b9e - Enhance hold_lock_file_for_{update,append}()&#xA;f563754 - demonstrate breakage of detached checkout wi&#xA;d1a43f2 - reset --hard/read-tree --reset -u: remove un&#xA;51a94af - Fix &quot;checkout --track -b newbranch&quot; on detac&#xA;b0ad11e - pull: allow &quot;git pull origin $something:$cur" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:49:09" IsFile="false"/>
						<item content="Git 项目有 20,000 多条提交，但我们给出搜索选项后，仅列出了其中满足条件的 6 条。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:49:17" IsFile="false"/>
					</item>
					<item content="使用图形化工具查阅提交历史" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:49:25" IsFile="false">
						<item content="有时候图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，凡是 git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后，就会启动图 2-2 所示的界面。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:49:31" IsFile="false"/>
						<item content=".\git\progit-2-02.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:49:55" IsImage="true" IsFile="true"/>
						<item content="上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:50:07" IsFile="false"/>
					</item>
				</item>
				<item content="2.4 - 撤消操作" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:12:50" IsFile="false">
					<item content="任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些操作并不总是可以撤消的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:50:32" IsFile="false"/>
					<item content="修改最后一次提交" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:50:36" IsFile="false">
						<item content="有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:50:42" IsFile="false"/>
						<item content="$ git commit --amend" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:50:46" IsFile="false"/>
						<item content="此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:50:56" IsFile="false"/>
						<item content="启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:51:00" IsFile="false"/>
						<item content="如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:51:06" IsFile="false"/>
						<item content="$ git commit -m &apos;initial commit&apos;&#xA;$ git add forgotten_file&#xA;$ git commit --amend" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:51:10" IsFile="false"/>
						<item content="上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:51:21" IsFile="false"/>
					</item>
					<item content="取消已经暂存的文件" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:51:39" IsFile="false">
						<item content="接下来的两个小节将演示如何取消暂存区域中的文件，以及如何取消工作目录中已修改的文件。不用担心，查看文件状态的时候就提示了该如何撤消，所以不需要死记硬背。来看下面的例子，有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢？其实，git status 的命令输出已经告诉了我们该怎么做：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:51:45" IsFile="false"/>
						<item content="$ git add .&#xA;$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#       modified:   README.txt&#xA;#       modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:51:52" IsFile="false"/>
						<item content="就在 “Changes to be committed” 下面，括号中有提示，可以使用 git reset HEAD &lt;file&gt;... 的方式取消暂存。好吧，我们来试试取消暂存 benchmarks.rb 文件：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:52:01" IsFile="false"/>
						<item content="$ git reset HEAD benchmarks.rb&#xA;benchmarks.rb: locally modified&#xA;$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#       modified:   README.txt&#xA;#&#xA;# Changed but not updated:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#xA;#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)&#xA;#&#xA;#       modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:52:08" IsFile="false"/>
						<item content="这条命令看起来有些古怪，先别管，能用就行。现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:52:15" IsFile="false"/>
					</item>
					<item content="取消对文件的修改" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:52:22" IsFile="false">
						<item content="如果觉得刚才对 benchmarks.rb 的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？git status 同样提示了具体的撤消方法，接着上面的例子，现在未暂存区域看起来像这样：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:52:28" IsFile="false"/>
						<item content="# Changed but not updated:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#xA;#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)&#xA;#&#xA;#       modified:   benchmarks.rb&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:52:36" IsFile="false"/>
						<item content="在第二个括号中，我们看到了抛弃文件修改的命令（至少在 Git 1.6.1 以及更高版本中会这样提示，如果你还在用老版本，我们强烈建议你升级，以获取最佳的用户体验），让我们试试看：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:52:45" IsFile="false"/>
						<item content="$ git checkout -- benchmarks.rb&#xA;$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#       modified:   README.txt&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:52:51" IsFile="false"/>
						<item content="可以看到，该文件已经恢复到修改前的版本。你可能已经意识到了，这条命令有些危险，所有对文件的修改都没有了，因为我们刚刚把之前版本的文件复制过来重写了此文件。所以在用这条命令前，请务必确定真的不再需要保留刚才的修改。如果只是想回退版本，同时保留刚才的修改以便将来继续工作，可以用下章介绍的 stashing 和分支来处理，应该会更好些。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:53:01" IsFile="false"/>
						<item content="记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 --amend 重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的，对 Git 来说它们就像从未存在过一样。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:53:11" IsFile="false"/>
					</item>
				</item>
				<item content="2.5 - 远程仓库的使用" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:12:54" IsFile="false">
					<item content="要参与任何一个 Git 项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:53:37" IsFile="false"/>
					<item content="查看当前的远程库" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:53:42" IsFile="false">
						<item content="要查看当前配置有哪些远程仓库，可以用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:53:47" IsFile="false"/>
						<item content="$ git clone git://github.com/schacon/ticgit.git&#xA;Initialized empty Git repository in /private/tmp/ticgit/.git/&#xA;remote: Counting objects: 595, done.&#xA;remote: Compressing objects: 100% (269/269), done.&#xA;remote: Total 595 (delta 255), reused 589 (delta 253)&#xA;Receiving objects: 100% (595/595), 73.31 KiB | 1 KiB/s, done.&#xA;Resolving deltas: 100% (255/255), done.&#xA;$ cd ticgit&#xA;$ git remote&#xA;origin" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:53:54" IsFile="false"/>
						<item content="也可以加上 -v 选项（译注：此为 --verbose 的简写，取首字母），显示对应的克隆地址：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:54:03" IsFile="false"/>
						<item content="$ git remote -v&#xA;origin	git://github.com/schacon/ticgit.git" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:54:11" IsFile="false"/>
						<item content="如果有多个远程仓库，此命令将全部列出。比如在我的 Grit 项目中，可以看到：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:54:20" IsFile="false"/>
						<item content="$ cd grit&#xA;$ git remote -v&#xA;bakkdoor  git://github.com/bakkdoor/grit.git&#xA;cho45     git://github.com/cho45/grit.git&#xA;defunkt   git://github.com/defunkt/grit.git&#xA;koke      git://github.com/koke/grit.git&#xA;origin    git@github.com:mojombo/grit.git" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:54:26" IsFile="false"/>
						<item content="这样一来，我就可以非常轻松地从这些用户的仓库中，拉取他们的提交到本地。请注意，上面列出的地址只有 origin 用的是 SSH URL 链接，所以也只有这个仓库我能推送数据上去（我们会在第四章解释原因）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:54:37" IsFile="false"/>
					</item>
					<item content="添加远程仓库" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:54:44" IsFile="false">
						<item content="要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:54:50" IsFile="false"/>
						<item content="$ git remote&#xA;origin&#xA;$ git remote add pb git://github.com/paulboone/ticgit.git&#xA;$ git remote -v&#xA;origin	git://github.com/schacon/ticgit.git&#xA;pb	git://github.com/paulboone/ticgit.git" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:54:55" IsFile="false"/>
						<item content="现在可以用字串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:02" IsFile="false"/>
						<item content="$ git fetch pb&#xA;remote: Counting objects: 58, done.&#xA;remote: Compressing objects: 100% (41/41), done.&#xA;remote: Total 44 (delta 24), reused 1 (delta 0)&#xA;Unpacking objects: 100% (44/44), done.&#xA;From git://github.com/paulboone/ticgit&#xA; * [new branch]      master     -&gt; pb/master&#xA; * [new branch]      ticgit     -&gt; pb/ticgit" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:55:09" IsFile="false"/>
						<item content="现在，Paul 的主干分支（master）已经完全可以在本地访问了，对应的名字是 pb/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:21" IsFile="false"/>
					</item>
					<item content="从远程仓库抓取数据" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:26" IsFile="false">
						<item content="正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:31" IsFile="false"/>
						<item content="$ git fetch [remote-name]" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:55:36" IsFile="false"/>
						<item content="此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。（我们会在第三章详细讨论关于分支的概念和操作。）" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:43" IsFile="false"/>
						<item content="如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:49" IsFile="false"/>
						<item content="如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:55:55" IsFile="false"/>
					</item>
					<item content="推送数据到远程仓库" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:02" IsFile="false">
						<item content="项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： git push [remote-name] [branch-name]。如果要把本地的 master 分支推送到 origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:08" IsFile="false"/>
						<item content="$ git push origin master" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:56:14" IsFile="false"/>
						<item content="只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。有关推送数据到远程仓库的详细内容见第三章。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:25" IsFile="false"/>
					</item>
					<item content="查看远程仓库信息" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:31" IsFile="false">
						<item content="我们可以通过命令 git remote show [remote-name] 查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:37" IsFile="false"/>
						<item content="$ git remote show origin&#xA;* remote origin&#xA;  URL: git://github.com/schacon/ticgit.git&#xA;  Remote branch merged with &apos;git pull&apos; while on branch master&#xA;    master&#xA;  Tracked remote branches&#xA;    master&#xA;    ticgit" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:56:42" IsFile="false"/>
						<item content="除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:50" IsFile="false"/>
						<item content="上面的例子非常简单，而随着使用 Git 的深入，git remote show 给出的信息可能会像这样：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:56:54" IsFile="false"/>
						<item content="$ git remote show origin&#xA;* remote origin&#xA;  URL: git@github.com:defunkt/github.git&#xA;  Remote branch merged with &apos;git pull&apos; while on branch issues&#xA;    issues&#xA;  Remote branch merged with &apos;git pull&apos; while on branch master&#xA;    master&#xA;  New remote branches (next fetch will store in remotes/origin)&#xA;    caching&#xA;  Stale tracking branches (use &apos;git remote prune&apos;)&#xA;    libwalker&#xA;    walker2&#xA;  Tracked remote branches&#xA;    acl&#xA;    apiv2&#xA;    dashboard2&#xA;    issues&#xA;    master&#xA;    postgres&#xA;  Local branch pushed with &apos;git push&apos;&#xA;    master:master" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:57:00" IsFile="false"/>
						<item content="它告诉我们，运行 git push 时缺省推送的分支是什么（译注：最后两行）。它还显示了有哪些远端分支还没有同步到本地（译注：第六行的 caching 分支），哪些已同步到本地的远端分支在远端服务器上已被删除（译注：Stale tracking branches 下面的两个分支），以及运行 git pull 时将自动合并哪些分支（译注：前四行中列出的 issues 和 master 分支）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:57:10" IsFile="false"/>
					</item>
					<item content="远程仓库的删除和重命名" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:57:16" IsFile="false">
						<item content="在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简短名称，比如想把 pb 改成 paul，可以这么运行：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:57:22" IsFile="false"/>
						<item content="$ git remote rename pb paul&#xA;$ git remote&#xA;origin&#xA;paul" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:57:27" IsFile="false"/>
						<item content="注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 paul/master。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:57:35" IsFile="false"/>
						<item content="碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:57:41" IsFile="false"/>
						<item content="$ git remote rm paul&#xA;$ git remote&#xA;origin" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:57:45" IsFile="false"/>
					</item>
				</item>
				<item content="2.6 - 打标签" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:12:58" IsFile="false">
					<item content="同大多数 VCS 一样，Git 也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如 v1.0 等等）的时候，经常这么做。本节我们一起来学习如何列出所有可用的标签，如何新建标签，以及各种不同类型标签之间的差别。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:57:59" IsFile="false"/>
					<item content="列显已有的标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:06" IsFile="false">
						<item content="列出现有标签的命令非常简单，直接运行 git tag 即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:11" IsFile="false"/>
						<item content="$ git tag&#xA;v0.1&#xA;v1.3" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:58:16" IsFile="false"/>
						<item content="显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:26" IsFile="false"/>
						<item content="我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:31" IsFile="false"/>
						<item content="$ git tag -l &apos;v1.4.2.*&apos;&#xA;v1.4.2.1&#xA;v1.4.2.2&#xA;v1.4.2.3&#xA;v1.4.2.4" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:58:36" IsFile="false"/>
					</item>
					<item content="新建标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:44" IsFile="false">
						<item content="Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:52" IsFile="false"/>
					</item>
					<item content="含附注的标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:58:59" IsFile="false">
						<item content="创建一个含附注类型的标签非常简单，用 -a （译注：取 annotated 的首字母）指定标签名字即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:59:11" IsFile="false"/>
						<item content="$ git tag -a v1.4 -m &apos;my version 1.4&apos;&#xA;$ git tag&#xA;v0.1&#xA;v1.3&#xA;v1.4" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:59:15" IsFile="false"/>
						<item content="而 -m 选项则指定了对应的标签说明，Git 会将此说明一同保存在标签对象中。如果没有给出该选项，Git 会启动文本编辑软件供你输入标签说明。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:59:23" IsFile="false"/>
						<item content="可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:59:28" IsFile="false"/>
						<item content="$ git show v1.4&#xA;tag v1.4&#xA;Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Mon Feb 9 14:45:11 2009 -0800&#xA;&#xA;my version 1.4&#xA;commit 15027957951b64cf874c3557a0f3547bd83b3ff6&#xA;Merge: 4a447f7... a6b4c97...&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sun Feb 8 19:02:46 2009 -0800&#xA;&#xA;    Merge branch &apos;experiment&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 15:59:35" IsFile="false"/>
						<item content="我们可以看到在提交对象信息上面，列出了此标签的提交者和提交时间，以及相应的标签说明。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:59:43" IsFile="false"/>
					</item>
					<item content="签署标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:59:49" IsFile="false">
						<item content="如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s （译注： 取 signed 的首字母）即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:59:54" IsFile="false"/>
						<item content="$ git tag -s v1.5 -m &apos;my signed 1.5 tag&apos;&#xA;You need a passphrase to unlock the secret key for&#xA;user: &quot;Scott Chacon &lt;schacon@gee-mail.com&gt;&quot;&#xA;1024-bit DSA key, ID F721C45A, created 2009-02-09" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:00:02" IsFile="false"/>
						<item content="现在再运行 git show 会看到对应的 GPG 签名也附在其内：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:00:09" IsFile="false"/>
						<item content="$ git show v1.5&#xA;tag v1.5&#xA;Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Mon Feb 9 15:22:20 2009 -0800&#xA;&#xA;my signed 1.5 tag&#xA;-----BEGIN PGP SIGNATURE-----&#xA;Version: GnuPG v1.4.8 (Darwin)&#xA;&#xA;iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN&#xA;Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/&#xA;=WryJ&#xA;-----END PGP SIGNATURE-----&#xA;commit 15027957951b64cf874c3557a0f3547bd83b3ff6&#xA;Merge: 4a447f7... a6b4c97...&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sun Feb 8 19:02:46 2009 -0800&#xA;&#xA;    Merge branch &apos;experiment&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:00:16" IsFile="false"/>
						<item content="稍后我们再学习如何验证已经签署的标签。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:00:23" IsFile="false"/>
					</item>
					<item content="轻量级标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:00:29" IsFile="false">
						<item content="轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个 -a，-s 或 -m 选项都不用，直接给出标签名字即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:00:35" IsFile="false"/>
						<item content="$ git tag v1.4-lw&#xA;$ git tag&#xA;v0.1&#xA;v1.3&#xA;v1.4&#xA;v1.4-lw&#xA;v1.5" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:00:40" IsFile="false"/>
						<item content="现在运行 git show 查看此标签信息，就只有相应的提交对象摘要：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:00:48" IsFile="false"/>
						<item content="$ git show v1.4-lw&#xA;commit 15027957951b64cf874c3557a0f3547bd83b3ff6&#xA;Merge: 4a447f7... a6b4c97...&#xA;Author: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Sun Feb 8 19:02:46 2009 -0800&#xA;&#xA;    Merge branch &apos;experiment&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:00:56" IsFile="false"/>
					</item>
					<item content="验证标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:01:04" IsFile="false">
						<item content="可以使用 git tag -v [tag-name] （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:01:09" IsFile="false"/>
						<item content="$ git tag -v v1.4.2.1&#xA;object 883653babd8ee7ea23e6a5c392bb739348b1eb61&#xA;type commit&#xA;tag v1.4.2.1&#xA;tagger Junio C Hamano &lt;junkio@cox.net&gt; 1158138501 -0700&#xA;&#xA;GIT 1.4.2.1&#xA;&#xA;Minor fixes since 1.4.2, including git-mv and git-http with alternates.&#xA;gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A&#xA;gpg: Good signature from &quot;Junio C Hamano &lt;junkio@cox.net&gt;&quot;&#xA;gpg:                 aka &quot;[jpeg image of size 1513]&quot;&#xA;Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:01:16" IsFile="false"/>
						<item content="若是没有签署者的公钥，会报告类似下面这样的错误：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:01:23" IsFile="false"/>
						<item content="gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A&#xA;gpg: Can&apos;t check signature: public key not found&#xA;error: could not verify the tag &apos;v1.4.2.1&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:01:28" IsFile="false"/>
					</item>
					<item content="后期加注标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:01:37" IsFile="false">
						<item content="你甚至可以在后期对早先的某次提交加注标签。比如在下面展示的提交历史中：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:01:45" IsFile="false"/>
						<item content="$ git log --pretty=oneline&#xA;15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch &apos;experiment&apos;&#xA;a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support&#xA;0d52aaab4479697da7686c15f77a3d64d9165190 one more thing&#xA;6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch &apos;experiment&apos;&#xA;0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function&#xA;4682c3261057305bdd616e23b64b0857d832627b added a todo file&#xA;166ae0c4d3f420721acbb115cc33848dfcc2121a started write support&#xA;9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile&#xA;964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo&#xA;8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:01:51" IsFile="false"/>
						<item content="我们忘了在提交 “updated rakefile” 后为此项目打上版本号 v1.2，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:01:59" IsFile="false"/>
						<item content="$ git tag -a v1.2 9fceb02" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:02:04" IsFile="false"/>
						<item content="可以看到我们已经补上了标签：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:02:12" IsFile="false"/>
						<item content="$ git tag&#xA;v0.1&#xA;v1.2&#xA;v1.3&#xA;v1.4&#xA;v1.4-lw&#xA;v1.5&#xA;&#xA;$ git show v1.2&#xA;tag v1.2&#xA;Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;&#xA;Date:   Mon Feb 9 15:32:16 2009 -0800&#xA;&#xA;version 1.2&#xA;commit 9fceb02d0ae598e95dc970b74767f19372d61af8&#xA;Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;&#xA;Date:   Sun Apr 27 20:43:35 2008 -0700&#xA;&#xA;    updated rakefile&#xA;..." icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:02:18" IsFile="false"/>
					</item>
					<item content="分享标签" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:02:26" IsFile="false">
						<item content="默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:02:33" IsFile="false"/>
						<item content="$ git push origin v1.5&#xA;Counting objects: 50, done.&#xA;Compressing objects: 100% (38/38), done.&#xA;Writing objects: 100% (44/44), 4.56 KiB, done.&#xA;Total 44 (delta 18), reused 8 (delta 1)&#xA;To git@github.com:schacon/simplegit.git&#xA;* [new tag]         v1.5 -&gt; v1.5" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:02:38" IsFile="false"/>
						<item content="如果要一次推送所有本地新增的标签上去，可以使用 --tags 选项：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:02:45" IsFile="false"/>
						<item content="$ git push origin --tags&#xA;Counting objects: 50, done.&#xA;Compressing objects: 100% (38/38), done.&#xA;Writing objects: 100% (44/44), 4.56 KiB, done.&#xA;Total 44 (delta 18), reused 8 (delta 1)&#xA;To git@github.com:schacon/simplegit.git&#xA; * [new tag]         v0.1 -&gt; v0.1&#xA; * [new tag]         v1.2 -&gt; v1.2&#xA; * [new tag]         v1.4 -&gt; v1.4&#xA; * [new tag]         v1.4-lw -&gt; v1.4-lw&#xA; * [new tag]         v1.5 -&gt; v1.5" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:02:51" IsFile="false"/>
						<item content="现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:02:58" IsFile="false"/>
					</item>
				</item>
				<item content="2.7 - 技巧和窍门" icon="none" branch="close" block="wide" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:13:01" IsFile="false">
					<item content="在结束本章之前，我还想和大家分享一些 Git 使用的技巧和窍门。很多使用 Git 的开发者可能根本就没用过这些技巧，我们也不是说在读过本书后非得用这些技巧不可，但至少应该有所了解吧。说实话，有了这些小窍门，我们的工作可以变得更简单，更轻松，更高效。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:03:32" IsFile="false"/>
					<item content="自动完成" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:03:37" IsFile="false">
						<item content="如果你用的是 Bash shell，可以试试看 Git 提供的自动完成脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:03:42" IsFile="false"/>
						<item content="source ~/.git-completion.bash" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:03:47" IsFile="false"/>
						<item content="可以为系统上所有用户都设置默认使用此脚本。Mac 上将此脚本复制到 /opt/local/etc/bash_completion.d 目录中，Linux 上则复制到 /etc/bash_completion.d/ 目录中。这两处目录中的脚本，都会在 Bash 启动时自动加载。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:03:59" IsFile="false"/>
						<item content="如果在 Windows 上安装了 msysGit，默认使用的 Git Bash 就已经配好了这个自动完成脚本，可以直接使用。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:10" IsFile="false"/>
						<item content="在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:15" IsFile="false"/>
						<item content="$ git co&lt;tab&gt;&lt;tab&gt;&#xA;commit config" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:04:19" IsFile="false"/>
						<item content="此例中，键入 git co 然后连按两次 Tab 键，会看到两个相关的建议（命令） commit 和 config。继而输入 m&lt;tab&gt; 会自动完成 git commit 命令的输入。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:26" IsFile="false"/>
						<item content="命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行 git log 的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲 Tab 键看看有哪些匹配的：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:32" IsFile="false"/>
						<item content="$ git log --s&lt;tab&gt;&#xA;--shortstat  --since=  --src-prefix=  --stat   --summary" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:04:36" IsFile="false"/>
						<item content="这个技巧不错吧，可以节省很多输入和查阅文档的时间。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:44" IsFile="false"/>
					</item>
					<item content="Git 命令别名" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:50" IsFile="false">
						<item content="Git 并不会推断你输入的几个字符将会是哪条命令，不过如果想偷懒，少敲几个命令的字符，可以用 git config 为命令设置别名。来看看下面的例子：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:04:59" IsFile="false"/>
						<item content="$ git config --global alias.co checkout&#xA;$ git config --global alias.br branch&#xA;$ git config --global alias.ci commit&#xA;$ git config --global alias.st status" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:05:06" IsFile="false"/>
						<item content="现在，如果要输入 git commit 只需键入 git ci 即可。而随着 Git 使用的深入，会有很多经常要用到的命令，遇到这种情况，不妨建个别名提高效率。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:05:15" IsFile="false"/>
						<item content="使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:05:20" IsFile="false"/>
						<item content="$ git config --global alias.unstage &apos;reset HEAD --&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:05:25" IsFile="false"/>
						<item content="这样一来，下面的两条命令完全等同：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:05:34" IsFile="false"/>
						<item content="$ git unstage fileA&#xA;$ git reset HEAD fileA" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:05:39" IsFile="false"/>
						<item content="显然，使用别名的方式看起来更清楚。另外，我们还经常设置 last 命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:05:48" IsFile="false"/>
						<item content="$ git config --global alias.last &apos;log -1 HEAD&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:05:53" IsFile="false"/>
						<item content="然后要看最后一次的提交信息，就变得简单多了：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:06:00" IsFile="false"/>
						<item content="$ git last&#xA;commit 66938dae3329c7aebe598c2246a8e6af90d04646&#xA;Author: Josh Goebel &lt;dreamer3@example.com&gt;&#xA;Date:   Tue Aug 26 19:48:51 2008 +0800&#xA;&#xA;    test for current head&#xA;&#xA;    Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:06:07" IsFile="false"/>
						<item content="可以看出，实际上 Git 只是简单地在命令中替换了你设置的别名。不过有时候我们希望运行某个外部命令，而非 Git 的附属工具，这个好办，只需要在命令前加上 ! 就行。如果你自己写了些处理 Git 仓库信息的脚本的话，就可以用这种技术包装起来。作为演示，我们可以设置用 git visual 启动 gitk：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:06:15" IsFile="false"/>
						<item content="$ git config --global alias.visual &quot;!gitk&quot;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:06:28" IsFile="false"/>
					</item>
				</item>
				<item content="2.8 - 小结" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 15:13:05" IsFile="false">
					<item content="到目前为止，你已经学会了最基本的 Git 操作：创建和克隆仓库，做出更新，暂存并提交这些更新，以及查看所有历史更新记录。接下来，我们将学习 Git 的必杀技特性：分支模型。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:06:45" IsFile="false"/>
				</item>
			</item>
			<item content="3. Git分支" icon="tick" branch="close" block="narrow" level="2" IsShown="true" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:07:48" IsFile="false">
				<item content="几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。在很多版本控制系统中，这是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很长时间。" icon="none" branch="none" block="narrow" level="3" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:09:20" IsFile="false"/>
				<item content="有人把 Git 的分支模型称为“必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。Git 有何特别之处呢？Git 的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。和许多其他版本控制系统不同，Git 鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。理解分支的概念并熟练运用后，你才会意识到为什么 Git 是一个如此强大而独特的工具，并从此真正改变你的开发方式。" icon="none" branch="none" block="narrow" level="3" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:09:26" IsFile="false"/>
				<item content="3.1 - 何谓分支" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:24" IsFile="false">
					<item content="为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git 保存的不是文件差异或者变化量，而只是一系列文件快照。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:09:37" IsFile="false"/>
					<item content="在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:09:43" IsFile="false"/>
					<item content="为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:09:53" IsFile="false"/>
					<item content="$ git add README test.rb LICENSE&#xA;$ git commit -m &apos;initial commit of my project&apos;" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:09:59" IsFile="false"/>
					<item content="当使用 git commit 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:10:06" IsFile="false"/>
					<item content="现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图 3-1 所示：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:10:14" IsFile="false"/>
					<item content=".\git\progit-3-01.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:10:35" IsImage="true" IsFile="true"/>
					<item content="图 3-1. 单个提交对象在仓库中的数据结构" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:10:53" IsFile="false"/>
					<item content="作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成图 3-2 的样子：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:10:54" IsFile="false"/>
					<item content=".\git\progit-3-02.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:11:14" IsImage="true" IsFile="true"/>
					<item content="图 3-2. 多个提交对象之间的链接关系" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:11:23" IsFile="false"/>
					<item content="现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:11:28" IsFile="false"/>
					<item content=".\git\progit-3-03.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:11:43" IsImage="true" IsFile="true"/>
					<item content="图 3-3. 分支其实就是从某个提交对象往回看的历史" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:11:51" IsFile="false"/>
					<item content="那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个 testing 分支，可以使用 git branch 命令：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:11:55" IsFile="false"/>
					<item content="$ git branch testing" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:12:00" IsFile="false"/>
					<item content="这会在当前 commit 对象上新建一个分支指针（见图 3-4）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:12:07" IsFile="false"/>
					<item content=".\git\progit-3-04.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:12:23" IsImage="true" IsFile="true"/>
					<item content="图 3-4. 多个分支指向提交数据的历史" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:12:32" IsFile="false"/>
					<item content="那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的 HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行 git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作（参考图 3-5）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:12:37" IsFile="false"/>
					<item content=".\git\progit-3-05.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:12:50" IsImage="true" IsFile="true"/>
					<item content="图 3-5. HEAD 指向当前所在的分支" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:13:00" IsFile="false"/>
					<item content="要切换到其他分支，可以执行 git checkout 命令。我们现在转换到新建的 testing 分支：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:13:05" IsFile="false"/>
					<item content="$ git checkout testing" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:13:10" IsFile="false"/>
					<item content="这样 HEAD 就指向了 testing 分支（见图3-6）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:13:19" IsFile="false"/>
					<item content=".\git\progit-3-06.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:13:34" IsImage="true" IsFile="true"/>
					<item content="图 3-6. HEAD 在你转换分支时指向新的分支" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:13:44" IsFile="false"/>
					<item content="这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:13:49" IsFile="false"/>
					<item content="$ vim test.rb&#xA;$ git commit -a -m &apos;made a change&apos;" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:13:54" IsFile="false"/>
					<item content="图 3-7 展示了提交后的结果。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:14:02" IsFile="false"/>
					<item content=".\git\progit-3-07.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:14:17" IsImage="true" IsFile="true"/>
					<item content="图 3-7. 每次提交后 HEAD 随着分支一起向前移动" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:14:23" IsFile="false"/>
					<item content="非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先 git checkout 时所在的 commit 对象。现在我们回到 master 分支看看：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:14:28" IsFile="false"/>
					<item content="$ git checkout master" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:14:32" IsFile="false"/>
					<item content="图 3-8 显示了结果。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:14:39" IsFile="false"/>
					<item content=".\git\progit-3-08.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:14:55" IsImage="true" IsFile="true"/>
					<item content="图 3-8. HEAD 在一次 checkout 之后移动到了另一个分支" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:15:05" IsFile="false"/>
					<item content="这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:15:10" IsFile="false"/>
					<item content="我们作些修改后再次提交：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:15:15" IsFile="false"/>
					<item content="$ vim test.rb&#xA;$ git commit -a -m &apos;made other changes&apos;" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:15:20" IsFile="false"/>
					<item content="现在我们的项目提交历史产生了分叉（如图 3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要 branch 和 checkout 这两条命令就可以完成。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:15:28" IsFile="false"/>
					<item content=".\git\progit-3-09.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:15:56" IsImage="true" IsFile="true"/>
					<item content="图 3-9. 不同流向的分支历史" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:16:13" IsFile="false"/>
					<item content="由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:16:18" IsFile="false"/>
					<item content="这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即 parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:16:23" IsFile="false"/>
					<item content="接下来看看，我们为什么应该频繁使用分支。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:16:28" IsFile="false"/>
				</item>
				<item content="3.2 - 分支的新建与合并" icon="none" branch="close" block="wide" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:12" IsFile="false">
					<item content="现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:17:52" IsFile="false"/>
					<item content="1. 开发某个网站。 2. 为实现某个新的需求，创建一个分支。 3. 在这个分支上开展工作。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:17:57" IsFile="false"/>
					<item content="假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:01" IsFile="false"/>
					<item content="1. 返回到原先已经发布到生产服务器上的分支。 &#xA;2. 为这次紧急修补建立一个新分支，并在其中修复问题。 &#xA;3. 通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。 &#xA;4. 切换到之前实现新需求的分支，继续工作。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:15" IsFile="false"/>
					<item content="分支的新建与切换" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:22" IsFile="false">
						<item content="首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新（见图 3-10）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:27" IsFile="false"/>
						<item content=".\git\progit-3-10.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:44" IsImage="true" IsFile="true"/>
						<item content="图 3-10. 一个简短的提交历史" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:53" IsFile="false"/>
						<item content="现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为 iss53。要新建并切换到该分支，运行 git checkout 并加上 -b 参数：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:18:57" IsFile="false"/>
						<item content="$ git checkout -b iss53&#xA;Switched to a new branch &quot;iss53&quot;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:19:01" IsFile="false"/>
						<item content="这相当于执行下面这两条命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:19:09" IsFile="false"/>
						<item content="$ git branch iss53&#xA;$ git checkout iss53" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:19:16" IsFile="false"/>
						<item content="图 3-11 示意该命令的执行结果。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:19:23" IsFile="false"/>
						<item content=".\git\progit-3-11.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:19:41" IsImage="true" IsFile="true"/>
						<item content="图 3-11. 创建了一个新分支的指针" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:19:49" IsFile="false"/>
						<item content="接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支（换句话说，当前的 HEAD 指针正指向 iss53，见图 3-12）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:19:54" IsFile="false"/>
						<item content="$ vim index.html&#xA;$ git commit -a -m &apos;added a new footer [issue 53]&apos;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:19:58" IsFile="false"/>
						<item content=".\git\progit-3-12.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:20:23" IsImage="true" IsFile="true"/>
						<item content="图 3-12. iss53 分支随工作进展向前推进" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:20:29" IsFile="false"/>
						<item content="现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和 iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回 master 分支。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:20:33" IsFile="false"/>
						<item content="不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止 Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做 stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到 master 分支：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:20:38" IsFile="false"/>
						<item content="$ git checkout master&#xA;Switched to branch &quot;master&quot;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:20:44" IsFile="false"/>
						<item content="此时工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:20:51" IsFile="false"/>
						<item content="接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定（见图 3-13）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:20:57" IsFile="false"/>
						<item content="$ git checkout -b &apos;hotfix&apos;&#xA;Switched to a new branch &quot;hotfix&quot;&#xA;$ vim index.html&#xA;$ git commit -a -m &apos;fixed the broken email address&apos;&#xA;[hotfix]: created 3a0874c: &quot;fixed the broken email address&quot;&#xA; 1 files changed, 0 insertions(+), 1 deletions(-)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:21:02" IsFile="false"/>
						<item content=".\git\progit-3-13.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:21:19" IsImage="true" IsFile="true"/>
						<item content="图 3-13. hotfix 分支是从 master 分支所在点分化出来的" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:21:24" IsFile="false"/>
						<item content="有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 git merge 命令来进行合并：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:21:28" IsFile="false"/>
						<item content="$ git checkout master&#xA;$ git merge hotfix&#xA;Updating f42c576..3a0874c&#xA;Fast forward&#xA; README |    1 -&#xA; 1 files changed, 0 insertions(+), 1 deletions(-)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:21:33" IsFile="false"/>
						<item content="请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:21:41" IsFile="false"/>
						<item content="现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了（见图 3-14）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:21:47" IsFile="false"/>
						<item content=".\git\progit-3-14.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:22:04" IsImage="true" IsFile="true"/>
						<item content="图 3-14. 合并之后，master 分支和 hotfix 分支指向同一位置。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:22:12" IsFile="false"/>
						<item content="在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix 分支和 master 都指向相同的提交对象，所以 hotfix 已经完成了历史使命，可以删掉了。使用 git branch 的 -d 选项执行删除操作：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:22:17" IsFile="false"/>
						<item content="$ git branch -d hotfix&#xA;Deleted branch hotfix (3a0874c)." icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:22:22" IsFile="false"/>
						<item content="现在回到之前未完成的 #53 问题修复分支上继续工作（图 3-15）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:22:29" IsFile="false"/>
						<item content="$ git checkout iss53&#xA;Switched to branch &quot;iss53&quot;&#xA;$ vim index.html&#xA;$ git commit -a -m &apos;finished the new footer [issue 53]&apos;&#xA;[iss53]: created ad82d7a: &quot;finished the new footer [issue 53]&quot;&#xA; 1 files changed, 1 insertions(+), 0 deletions(-)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:22:34" IsFile="false"/>
						<item content=".\git\progit-3-15.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:22:51" IsImage="true" IsFile="true"/>
						<item content="图 3-15. iss53 分支可以不受影响继续推进。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:22:58" IsFile="false"/>
						<item content="不用担心之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果确实需要纳入此次修补，可以用 git merge master 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将 iss53 分支中的更新并入 master。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:02" IsFile="false"/>
					</item>
					<item content="分支的合并" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:12" IsFile="false">
						<item content="在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并 hotfix 分支差不多，只需回到 master 分支，运行 git merge 命令指定要合并进来的分支：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:18" IsFile="false"/>
						<item content="$ git checkout master&#xA;$ git merge iss53&#xA;Merge made by recursive.&#xA; README |    1 +&#xA; 1 files changed, 1 insertions(+), 0 deletions(-)" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:23:22" IsFile="false"/>
						<item content="请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16 用红框标出了 Git 用于合并的三个提交对象：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:31" IsFile="false"/>
						<item content=".\git\progit-3-16.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:45" IsImage="true" IsFile="true"/>
						<item content="图 3-16. Git 为分支合并自动识别出最佳的同源合并点。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:53" IsFile="false"/>
						<item content="这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）（见图 3-17）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:23:57" IsFile="false"/>
						<item content="值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS 或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git 的合并操作比其他系统都要简单不少。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:24:05" IsFile="false"/>
						<item content=".\git\progit-3-17.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:24:23" IsImage="true" IsFile="true"/>
						<item content="图 3-17. Git 自动创建了一个包含了合并结果的提交对象。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:24:29" IsFile="false"/>
						<item content="既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:24:35" IsFile="false"/>
						<item content="$ git branch -d iss53" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:24:39" IsFile="false"/>
					</item>
					<item content="遇到冲突时的分支合并" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:24:49" IsFile="false">
						<item content="有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:24:54" IsFile="false"/>
						<item content="$ git merge iss53&#xA;Auto-merging index.html&#xA;CONFLICT (content): Merge conflict in index.html&#xA;Automatic merge failed; fix conflicts and then commit the result." icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:25:00" IsFile="false"/>
						<item content="Git 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:25:08" IsFile="false"/>
						<item content="[master*]$ git status&#xA;index.html: needs merge&#xA;# On branch master&#xA;# Changed but not updated:&#xA;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#xA;#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)&#xA;#&#xA;#	unmerged:   index.html&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:25:14" IsFile="false"/>
						<item content="任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:25:22" IsFile="false"/>
						<item content="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html&#xA;&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;&#xA;=======&#xA;&lt;div id=&quot;footer&quot;&gt;&#xA;  please contact us at support@github.com&#xA;&lt;/div&gt;&#xA;&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:25:28" IsFile="false"/>
						<item content="可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:25:36" IsFile="false"/>
						<item content="&lt;div id=&quot;footer&quot;&gt;&#xA;please contact us at email.support@github.com&#xA;&lt;/div&gt;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:25:40" IsFile="false"/>
						<item content="这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，======= 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行 git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:25:49" IsFile="false"/>
						<item content="$ git mergetool&#xA;merge tool candidates: kdiff3 tkdiff xxdiff meld gvimdiff opendiff emerge vimdiff&#xA;Merging the files: index.html&#xA;&#xA;Normal merge conflict for &apos;index.html&apos;:&#xA;  {local}: modified&#xA;  {remote}: modified&#xA;Hit return to start merge resolution tool (opendiff):" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:25:53" IsFile="false"/>
						<item content="如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在 Mac 上运行了该命令），你可以在上方”merge tool candidates”里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:26:02" IsFile="false"/>
						<item content="退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:26:06" IsFile="false"/>
						<item content="再运行一次 git status 来确认所有冲突都已解决：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:26:11" IsFile="false"/>
						<item content="$ git status&#xA;# On branch master&#xA;# Changes to be committed:&#xA;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#xA;#&#xA;#	modified:   index.html&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:26:16" IsFile="false"/>
						<item content="如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。提交的记录差不多是这样：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:26:23" IsFile="false"/>
						<item content="Merge branch &apos;iss53&apos;&#xA;&#xA;Conflicts:&#xA;  index.html&#xA;#&#xA;# It looks like you may be committing a MERGE.&#xA;# If this is not correct, please remove the file&#xA;# .git/MERGE_HEAD&#xA;# and try again.&#xA;#" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:26:29" IsFile="false"/>
						<item content="如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:26:37" IsFile="false"/>
					</item>
				</item>
				<item content="3.3 - 分支的管理" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:14" IsFile="false">
					<item content="到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:27:03" IsFile="false"/>
					<item content="git branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:27:08" IsFile="false"/>
					<item content="$ git branch&#xA;  iss53&#xA;* master&#xA;  testing" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:27:12" IsFile="false"/>
					<item content="注意看 master 分支前的 * 字符：它表示当前所在的分支。也就是说，如果现在提交更新，master 分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行 git branch -v：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:27:19" IsFile="false"/>
					<item content="$ git branch -v&#xA;  iss53   93b412c fix javascript issue&#xA;* master  7a98805 Merge branch &apos;iss53&apos;&#xA;  testing 782fd34 add scott to the author list in the readmes" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:27:24" IsFile="false"/>
					<item content="要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 --merge 和 --no-merged 选项（Git 1.5.6 以上版本）。比如用 git branch --merge 查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:27:33" IsFile="false"/>
					<item content="$ git branch --merged&#xA;  iss53&#xA;* master" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:27:39" IsFile="false"/>
					<item content="之前我们已经合并了 iss53，所以在这里会看到它。一般来说，列表中没有 * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:27:47" IsFile="false"/>
					<item content="另外可以用 git branch --no-merged 查看尚未合并的工作：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:27:52" IsFile="false"/>
					<item content="$ git branch --no-merged&#xA;  testing" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:27:56" IsFile="false"/>
					<item content="它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用 git branch -d 删除该分支会提示错误，因为那样做会丢失数据：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:05" IsFile="false"/>
					<item content="$ git branch -d testing&#xA;error: The branch &apos;testing&apos; is not an ancestor of your current HEAD.&#xA;If you are sure you want to delete it, run &apos;git branch -D testing&apos;." icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:28:11" IsFile="false"/>
					<item content="不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项 -D 强制执行，就像上面提示信息中给出的那样。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:19" IsFile="false"/>
				</item>
				<item content="3.4 - 利用分支进行开发的工作流程" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:16" IsFile="false">
					<item content="现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:38" IsFile="false"/>
					<item content="长期分支" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:42" IsFile="false">
						<item content="由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:47" IsFile="false"/>
						<item content="许多使用 Git 的开发者都喜欢用这种方式来开展工作，比如仅在 master 分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为 develop 或 next 的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到 master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:52" IsFile="false"/>
						<item content="本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图 3-18）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:28:56" IsFile="false"/>
						<item content=".\git\progit-3-18.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:29:12" IsImage="true" IsFile="true"/>
						<item content="图 3-18. 稳定分支总是比较老旧。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:29:20" IsFile="false"/>
						<item content="或者把它们想象成工作流水线，或许更好理解一些，经过测试的提交对象集合被遴选到更稳定的流水线（见图 3-19）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:29:25" IsFile="false"/>
						<item content=".\git\progit-3-19.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:29:43" IsImage="true" IsFile="true"/>
						<item content="图 3-19. 想象成流水线可能会容易点。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:29:50" IsFile="false"/>
						<item content="你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或 pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或 master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:29:54" IsFile="false"/>
					</item>
					<item content="特性分支" icon="none" branch="open" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:00" IsFile="false">
						<item content="在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:06" IsFile="false"/>
						<item content="我们在上节的例子里已经见过这种用法了。我们创建了 iss53 和 hotfix 这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换 — 因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:11" IsFile="false"/>
						<item content="现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master 工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前 C4 的地方又分出一个分支 iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9 和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master 的最新提交 C10 处开了个新的分支 dumbidea 做些试验。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:16" IsFile="false"/>
						<item content=".\git\progit-3-20.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:33" IsImage="true" IsFile="true"/>
						<item content="图 3-20. 拥有多个特性分支的提交历史。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:38" IsFile="false"/>
						<item content="现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2 中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的 iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图 3-21 这样：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:30:43" IsFile="false"/>
						<item content=".\git\progit-3-21.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:00" IsImage="true" IsFile="true"/>
						<item content="图 3-21. 合并了 dumbidea 和 iss91v2 后的分支历史。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:06" IsFile="false"/>
						<item content="请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 — 完全不涉及与服务器的交互。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:11" IsFile="false"/>
					</item>
				</item>
				<item content="3.5 - 远程分支" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:18" IsFile="false">
					<item content="远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:26" IsFile="false"/>
					<item content="我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同 origin 仓库通讯时 master 的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个 iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是 origin/iss53 分支。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:30" IsFile="false"/>
					<item content="可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:35" IsFile="false"/>
					<item content=".\git\progit-3-22.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:50" IsImage="true" IsFile="true"/>
					<item content="图 3-22. 一次 Git 克隆会建立你自己的本地分支 master 和远程分支 origin/master，它们都指向 origin/master 分支的最后一次提交。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:31:56" IsFile="false"/>
					<item content="如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com 推送了他们的更新，那么服务器上的 master 分支就会向前推进，而于此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的 origin/master 指针仍然保持原位不会移动（见图 3-23）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:01" IsFile="false"/>
					<item content=".\git\progit-3-23.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:17" IsImage="true" IsFile="true"/>
					<item content="图 3-23. 在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:25" IsFile="false"/>
					<item content="可以运行 git fetch origin 来同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器（本例为 git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上（见图 3-24）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:30" IsFile="false"/>
					<item content=".\git\progit-3-24.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:45" IsImage="true" IsFile="true"/>
					<item content="图 3-24. git fetch 命令会更新 remote 索引。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:50" IsFile="false"/>
					<item content="为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器 git.team1.ourcompany.com。可以用第二章中提到的 git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为 teamone，以便代替原始的 Git 地址（见图 3-25）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:32:55" IsFile="false"/>
					<item content=".\git\progit-3-25.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:33:10" IsImage="true" IsFile="true"/>
					<item content="图 3-25. 把另一个服务器加为远程仓库" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:33:19" IsFile="false"/>
					<item content="现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你 origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为 teamone/master 的分支，指向 teamone 服务器上 master 分支所在的提交对象 31b8e（见图 3-26）。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:33:23" IsFile="false"/>
					<item content=".\git\progit-3-26.png" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:33:38" IsImage="true" IsFile="true"/>
					<item content="图 3-26. 你在本地有了一个指向 teamone 服务器上 master 分支的索引。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:33:46" IsFile="false"/>
					<item content="推送本地分支" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:04" IsFile="false">
						<item content="要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你的本地分支不会被自动同步到你引入的远程服务器上，除非你明确执行推送操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:11" IsFile="false"/>
						<item content="如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git push (远程仓库名) (分支名)：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:15" IsFile="false"/>
						<item content="$ git push origin serverfix&#xA;Counting objects: 20, done.&#xA;Compressing objects: 100% (14/14), done.&#xA;Writing objects: 100% (15/15), 1.74 KiB, done.&#xA;Total 15 (delta 5), reused 0 (delta 0)&#xA;To git@github.com:schacon/simplegit.git&#xA; * [new branch]      serverfix -&gt; serverfix" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:34:20" IsFile="false"/>
						<item content="这其实有点像条捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serferfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:30" IsFile="false"/>
						<item content="接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 origin/serverfix：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:34" IsFile="false"/>
						<item content="$ git fetch origin&#xA;remote: Counting objects: 20, done.&#xA;remote: Compressing objects: 100% (14/14), done.&#xA;remote: Total 15 (delta 5), reused 0 (delta 0)&#xA;Unpacking objects: 100% (15/15), done.&#xA;From git@github.com:schacon/simplegit&#xA; * [new branch]      serverfix    -&gt; origin/serverfix" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:34:38" IsFile="false"/>
						<item content="值得注意的是，在 fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的 serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:45" IsFile="false"/>
						<item content="如果要把该内容合并到当前分支，可以运行 git merge origin/serverfix。如果想要一份自己的 serverfix 来开发，可以在远程分支的基础上分化出一个新的分支来：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:34:51" IsFile="false"/>
						<item content="$ git checkout -b serverfix origin/serverfix&#xA;Branch serverfix set up to track remote branch refs/remotes/origin/serverfix.&#xA;Switched to a new branch &quot;serverfix&quot;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:34:58" IsFile="false"/>
						<item content="这会切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致，这样你就可以在里面继续开发了。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:35:10" IsFile="false"/>
					</item>
					<item content="跟踪远程分支" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:35:15" IsFile="false">
						<item content="从远程分支 checkout 出来的本地分支，称为_跟踪分支(tracking branch)_。跟踪分支是一种和远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:35:20" IsFile="false"/>
						<item content="在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 --track 选项简化：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:35:24" IsFile="false"/>
						<item content="$ git checkout --track origin/serverfix&#xA;Branch serverfix set up to track remote branch refs/remotes/origin/serverfix.&#xA;Switched to a new branch &quot;serverfix&quot;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:35:29" IsFile="false"/>
						<item content="要为本地分支设定不同于远程分支的名字，只需在前个版本的命令里换个名字：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:35:48" IsFile="false"/>
						<item content="$ git checkout -b sf origin/serverfix&#xA;Branch sf set up to track remote branch refs/remotes/origin/serverfix.&#xA;Switched to a new branch &quot;sf&quot;" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:35:43" IsFile="false"/>
						<item content="现在你的本地分支 sf 会自动向 origin/serverfix 推送和抓取数据了。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:35:55" IsFile="false"/>
					</item>
					<item content="删除远程分支" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:36:00" IsFile="false">
						<item content="如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的地方），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:36:06" IsFile="false"/>
						<item content="$ git push origin :serverfix&#xA;To git@github.com:schacon/simplegit.git&#xA; - [deleted]         serverfix" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:36:10" IsFile="false"/>
						<item content="咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:36:20" IsFile="false"/>
					</item>
				</item>
				<item content="3.6 - 分支的衍合" icon="none" branch="close" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:20" IsFile="false">
					<item content="把一个分支整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:36:44" IsFile="false"/>
					<item content="基本的衍合操作" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:36:48" IsFile="false">
						<item content="请回顾之前有关合并的一节（见图 3-27），你会看到开发进程分叉到两个不同分支，又各自提交了更新。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:36:53" IsFile="false"/>
						<item content=".\git\progit-3-27.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:37:42" IsImage="true" IsFile="true"/>
						<item content="图 3-27. 最初分叉的提交历史。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:37:49" IsFile="false"/>
						<item content="之前介绍过，最容易的整合分支的方法是 merge 命令，它会把两个分支最新的快照（C3 和 C4）以及二者最新的共同祖先（C2）进行三方合并，合并的结果是产生一个新的提交对象（C5）。如图 3-28 所示：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:37:53" IsFile="false"/>
						<item content=".\git\progit-3-28.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:02" IsImage="true" IsFile="true"/>
						<item content="图 3-28. 通过合并一个分支来整合分叉了的历史。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:08" IsFile="false"/>
						<item content="其实，还有另外一个选择：你可以把在 C3 里产生的变化补丁在 C4 的基础上重新打一遍。在 Git 里，这种操作叫做_衍合（rebase）_。有了 rebase 命令，就可以把在一个分支里提交的改变移到另一个分支里重放一遍。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:11" IsFile="false"/>
						<item content="在上面这个例子中，运行：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:15" IsFile="false"/>
						<item content="$ git checkout experiment&#xA;$ git rebase master&#xA;First, rewinding head to replay your work on top of it...&#xA;Applying: added staged command" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:38:20" IsFile="false"/>
						<item content="它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支 master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写 experiment 的提交历史，使它成为 master 分支的直接下游，如图 3-29 所示：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:28" IsFile="false"/>
						<item content=".\git\progit-3-29.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:53" IsImage="true" IsFile="true"/>
						<item content="图 3-29. 把 C3 里产生的改变到 C4 上重演一遍。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:38:59" IsFile="false"/>
						<item content="现在回到 master 分支，进行一次快进合并（见图 3-30）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:04" IsFile="false"/>
						<item content=".\git\progit-3-30.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:11" IsImage="true" IsFile="true"/>
						<item content="图 3-30. master 分支的快进。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:18" IsFile="false"/>
						<item content="现在的 C3’ 对应的快照，其实和普通的三方合并，即上个例子中的 C5 对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:21" IsFile="false"/>
						<item content="一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 — 比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的 origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:26" IsFile="false"/>
						<item content="请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:30" IsFile="false"/>
					</item>
					<item content="有趣的衍合" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:35" IsFile="false">
						<item content="衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图 3-31 的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从 C3 的地方再增加一个 client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到 server 分支提交了 C10。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:42" IsFile="false"/>
						<item content=".\git\progit-3-31.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:39:57" IsImage="true" IsFile="true"/>
						<item content="图 3-31. 从一个特性分支里再分出一个特性分支的历史。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:40:02" IsFile="false"/>
						<item content="假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于 server 分支而非 master 分支的改变（即 C8 和 C9），跳过 server 直接放到 master 分支中重演一遍，但这需要用 git rebase 的 --onto 选项指定新的基底分支 master：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:40:07" IsFile="false"/>
						<item content="$ git rebase --onto master server client" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:40:11" IsFile="false"/>
						<item content="这好比在说：“取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的 C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为 server 和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的 C8，C9 修改，放到主干重演。）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:40:20" IsFile="false"/>
						<item content=".\git\progit-3-32.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:40:37" IsImage="true" IsFile="true"/>
						<item content="图 3-32. 将特性分支上的另一个特性分支衍合到其他分支。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:40:43" IsFile="false"/>
						<item content="现在可以快进 master 分支了（见图 3-33）：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:40:47" IsFile="false"/>
						<item content="$ git checkout master&#xA;$ git merge client" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:40:51" IsFile="false"/>
						<item content=".\git\progit-3-33.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:41:12" IsImage="true" IsFile="true"/>
						<item content="图 3-33. 快进 master 分支，使之包含 client 分支的变化。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:41:21" IsFile="false"/>
						<item content="现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server 分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:41:25" IsFile="false"/>
						<item content="$ git rebase master server" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:41:30" IsFile="false"/>
						<item content="于是，server 的进度应用到 master 的基础上，如图 3-34 所示：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:41:37" IsFile="false"/>
						<item content=".\git\progit-3-34.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:04" IsImage="true" IsFile="true"/>
						<item content="图 3-34. 在 master 分支上衍合 server 分支。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:09" IsFile="false"/>
						<item content="然后就可以快进主干分支 master 了：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:13" IsFile="false"/>
						<item content="$ git checkout master&#xA;$ git merge server" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:42:16" IsFile="false"/>
						<item content="现在 client 和 server 分支的变化都已经集成到主干分支来了，可以删掉它们了。最终我们的提交历史会变成图 3-35 的样子：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:23" IsFile="false"/>
						<item content="$ git branch -d client&#xA;$ git branch -d server" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="3f3f7600" BkgrdColor="ffcc9900" ModifyTime="2011-09-01 16:42:28" IsFile="false"/>
						<item content=".\git\progit-3-35.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:40" IsImage="true" IsFile="true"/>
						<item content="图 3-35. 最终的提交历史" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:47" IsFile="false"/>
					</item>
					<item content="衍合的风险" icon="none" branch="close" block="narrow" level="4" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:42:53" IsFile="false">
						<item content="呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:00" IsFile="false"/>
						<item content="一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:05" IsFile="false"/>
						<item content="如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:10" IsFile="false"/>
						<item content="在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用 git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:14" IsFile="false"/>
						<item content="下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图 3-36 所示：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:20" IsFile="false"/>
						<item content=".\git\progit-3-36.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:40" IsImage="true" IsFile="true"/>
						<item content="图 3-36. 克隆一个仓库，在其基础上工作一番。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:46" IsFile="false"/>
						<item content="现在，某人在 C1 的基础上做了些改变，并合并他自己的分支得到结果 C6，推送到中央服务器。当你抓取并合并这些数据到你本地的开发分支中后，会得到合并结果 C7，历史提交会变成图 3-37 这样：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:43:51" IsFile="false"/>
						<item content=".\git\progit-3-37.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:44:16" IsImage="true" IsFile="true"/>
						<item content="图 3-37. 抓取他人提交，并入自己主干。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:44:21" IsFile="false"/>
						<item content="接下来，那个推送 C6 上来的人决定用衍合取代之前的合并操作；继而又用 git push --force 覆盖了服务器上的历史，得到 C4’。而之后当你再从服务器上下载最新提交后，会得到：" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:44:25" IsFile="false"/>
						<item content=".\git\progit-3-38.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:44:33" IsImage="true" IsFile="true"/>
						<item content="图 3-38. 有人推送了衍合后得到的 C4’，丢弃了你作为开发基础的 C4 和 C6。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:44:40" IsFile="false"/>
						<item content="下载更新后需要合并，但此时衍合产生的提交对象 C4’ 的 SHA-1 校验值和之前 C4 完全不同，所以 Git 会把它们当作新的提交对象处理，而实际上此刻你的提交历史 C7 中早已经包含了 C4 的修改内容，于是合并操作会把 C7 和 C4’ 合并为 C8（见图 3-39）:" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:44:44" IsFile="false"/>
						<item content=".\git\progit-3-39.png" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:45:01" IsImage="true" IsFile="true"/>
						<item content="图 3-39. 你把相同的内容又合并了一遍，生成一个新的提交 C8。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:45:08" IsFile="false"/>
						<item content="C8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在 C8 之后，你的提交历史里就会同时包含 C4 和 C4’，两者有着不同的 SHA-1 校验值，如果用 git log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了 C6 后又用衍合发布 C4’ 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:45:12" IsFile="false"/>
						<item content="如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。" icon="none" branch="none" block="narrow" level="5" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:45:17" IsFile="false"/>
					</item>
				</item>
				<item content="3.7 - 小结" icon="none" branch="open" block="narrow" level="3" IsShown="false" IsBold="true" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:08:22" IsFile="false">
					<item content="读到这里，你应该已经学会了如何创建分支并切换到新分支，在不同分支间转换，合并本地分支，把分支推送到共享服务器上，使用共享分支与他人协作，以及在分享之前进行衍合。" icon="none" branch="none" block="narrow" level="4" IsShown="false" IsBold="false" ShowBranch="false" TextColor="00000000" BkgrdColor="ffffff00" ModifyTime="2011-09-01 16:45:39" IsFile="false"/>
				</item>
			</item>
		</item>
	</item>
</root>
